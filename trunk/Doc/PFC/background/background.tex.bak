%=============================================================================%
% Author : Angel Tezanos Ibañez                                               %
% Author : Pablo Sánchez Barreiro                                             %  % Version: 2.0, 23/02/2011                                                    %
% Master Thesis: Introduction                                                 %
%=============================================================================%

\chapterheader{Antecedentes}{Antecedentes}
\label{chap:introduction}

El presente capítulo describe brevemente las tecnologías sobre las que se fundamenta el presente proyecto. Más concretamente, se explica el funcionamiento de ...

\chaptertoc

\section{Desarrollo de Software basado en Componentes}

El proyecto se desarrollara bajo una programación orientada a componentes. Esta rama de la ingeniería software trata de construir sistemas a base de componentes funcionales, como si de un lego se tratase. Para ello cada componente debe tener una interfaz bien definida.

El nivel de abstracción de de los componentes se considera mas alto que el de los objetos al agrupar unidades funcionales autonomamente. De esta manera se explota en gran medida las posibilidades de reutilización. Pudiendo utilizar componentes ya creados por otros, y/o en otros proyectos de manera rápida y sencilla.

Cada componente software es un elemento o pieza del sistema final que ofrece un servicio y es capaz de comunicarse con el resto de componentes. básicamente un componente es un objeto escrito siguiendo unas especificaciones, si las cumple adquiere la característica de reusabilidad.

Los componentes deben poder ser serializados para garantizar el envió del estado del objeto a través de flujos de datos.

Para que un componente este bien diseñado requiere un esfuerzo en la fase de diseño, pues se debe tener en cuenta que puede ser reutilizado por muchos programas, debe estar debidamente documentado, probado de manera enfática, es decir, se debe probar la validez de las entradas y que sea capaz de mostrar mensajes de error claros y oportunos; también se debe prever el uso del componente de manera imprevista o incorrecta.

\section{Java beans como modelo de componentes}

JavaBeans es la tecnología de componentes de Java, cada componente se le conoce como bean, como se dijo anteriormente, un bean no es mas que una clase de objetos con unas características especiales:

\begin{enumerate}
	\item Es una clase publica que implementa la interfaz serializable
	\item Expone una seria de propiedades que pueden ser leídas y modificadas por el entorno de desarrollo.
	\item Los evento que posea pueden ser capturados y asociados a una serie de acciones.
\end{enumerate}

% Sin número \begin{itemize}

Las propiedades no son mas que atributos del objeto que pueden ser modificados y leídos por el entorno de desarrollo. Cada propiedad debe tener al menos un método get para obtener el valor, y un set para modificarlo. En caso de que no se implemente el método set se entenderá que es una propiedad de solo lectura.

%%Continuar!!!

\section{Ámbito Funcional}
El objetivo general de la aplicación \emph{Apolo} es ofrecer al usuario la posibilidad de ordenar cómodamente sus fotografías, así como descartar las que no satisfagan la calidad esperada o deseada.

Actualmente gracias a la incorporación de una cámara fotográfica a casi cualquier aparato electrónico, podemos tomar fotografías en prácticamente cualquier instante de nuestra vida. Eso unido a que ya no es necesario un proceso de revelado, nos impulsa a tener almacenadas muchas fotografías. La mayoría de las veces, se encuentran mezcladas con fotografías que no salieron como se esperaba (movidas, mal enfocadas, sobreexpuestas...) e incluso en ocasiones, el orden no es el adecuado.

Disponer de las fotografías almacenadas de esta forma, no resulta cómodo para una visualización de las mismas, pues como es evidente, habrá fotografías que no interesa que sean vistas y serán pasadas de forma rápida en su exposición. Si tratamos de seleccionar y ordenarlas manualmente resultara un trabajo tedioso a la vez que poco cómodo.

Para resolver estos problemas y hacer la tarea mas llevadera, nace la idea de Apolo, un \emph{Clasificador de Imágenes Digitales inspirado en los Clasificadores de Diapositivas de la Fotografía Analógica.} Los clasificadores de fotografía analógicos se caracterizaban por la facilidad de clasificación y ordenación de las diapositivas o fotografías, y es precisamente esa facilidad la que deseamos tener en el software a desarrollar para hacer la tarea mas amigable. Por lo tanto Apolo tiene un funcionamiento muy similar, la cual se pasa a describir:

%%************************
%%%%% Mezclo diapositiva y fotografia. Estaria bien definir un unico nombre.
%%************************

\begin{enumerate}
\item Para empezar a clasificar y ordenar fotografías es necesario primero haberlas importado a la aplicación. Una vez importada una carpeta o una serie de fotografías, estas aparecerán en la zona baja de la aplicación como si de unas diapositivas clásicas se trataran.
\item El usuario puede en ese momento empezar a seleccionar las fotografías que considere adecuadas y arrastrarlas hasta la parte central de la aplicación, en esta zona se encuentran una especie de estanterías, o baldas, donde depositar la diapositiva arrastrada.
\item Cada fotografía tiene un menu asociado, el cual ofrece la posibilidad de ver la imagen (a tamaño completo), descartarla u observar los detalles de la misma (metadatos).
\item El usuario puede en cualquier instante alterar el orden de las diapositivas en las estanterías simplemente arrastrando la diapositiva hacia el lugar que desea.
\item También puede cambiar la diapositiva de estantería de la misma forma. Simplemente arrastrando la fotografía seleccionada y depositándola en la estantería deseada.
\item Una vez este una estantería a gusto del usuario, y por tanto una subsecuencia de fotografías, puede indicar a la aplicación que las lleve a la zona superior, donde se encuentran las subsecuencias de fotografías clasificadas y ordenadas.
\item El usuario también puede descartar todas las fotos que se encuentren en una estantería. De esta forma dejarían de aparecer en la aplicación. El efecto es el mismo que si no hubieran sido importadas en un principio.
\item Cuando en la zona superior de la aplicación se encuentren todas las subsecuencias de fotografías deseadas por el usuario. Este podrá exportarlas a un directorio. La aplicación realizara una copia de cada la foto original en el directorio indicado y las renombrara de manera que conserven la ordenación indicada.
\item En ningún caso se modifican, ni suprimen las fotografías originales (las que se importan). En cada exportación se duplican tantas fotos como fueron seleccionadas.
\end{enumerate} 