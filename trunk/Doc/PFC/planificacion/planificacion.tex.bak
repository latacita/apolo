=============================================================================%
% Author : Angel Tezanos Ibañez                                              %
% Author : Pablo Sánchez Barreiro                                            %
% Version: 2.0, 07/04/2011                                                   %
% Master Thesis: Planificación del Proyecto                                  %
%============================================================================%

\chapterheader{Planificación del Proyecto}{Planificación del Proyecto}
\label{chap:planificacion}

\todo{Párrafo introductorio}

\chaptertoc

\section{Ámbito Funcional del Proyecto}
\label{sec:plannning:ambito}

El objetivo general de la aplicación \emph{Apolo} es ofrecer al usuario la posibilidad de ordenar cómodamente sus fotografías digitales, de acuerdo al criterio que este elija, y descartar las que no satisfagan la calidad esperada o deseada.

Actualmente gracias a la incorporación de una cámara fotográfica a casi cualquier aparato electrónico, podemos tomar fotografías en prácticamente cualquier instante de nuestra vida. Eso unido a que ya no es necesario un proceso de revelado, nos impulsa a almacenar bastantes fotografías, muchas de ellas totalmente innecesarias. La mayoría de las veces, las fotografías de interés se encuentran mezcladas con fotografías que no salieron como se esperaba (movidas, mal enfocadas o sobreexpuestas). Otras veces, el orden en el que se almacenan no es el deseado para su exposición, o nos gustaría filtrar algunas de ellas. Por ejemplo, tras un viaje de negocios puede que no sea el mismo conjunto de fotos el que deseemos enseñar a nuestro jefe que a nuestros amigos.

Mantener las fotografías almacenadas de este modo no resulta práctico. Si el usuario desea exhibir un subconjunto de una selección de fotografías, tendrá primero que seleccionar las fotografías que desea mostrar, copiarlas en un lugar aparte y luego ordenarlas de acuerdo al orden de exposición deseado. Dicho trabajo, si se ha de realizar con los gestores de ficheros actuales, puede resultar una tarea ardua y tediosa, sobre todo si se han de renombrar los archivos de forma manual para darles el orden deseado.

Para resolver estos problemas y hacer esta tarea menos tediosa, nace la idea de Apolo, un \emph{Clasificador de Imágenes Digitales inspirado en los Clasificadores de Diapositivas de la Fotografía Analógica}. Los clasificadores de fotografía analógicos, tal como el que aparece en la Figura~\ref{}, no es mas que una superficie retroiluminada, e inclinada generalmente, con unas filas, al estilo de baldas, donde es posible depositar las diapositivas. De esta manera gracias a la luz que emite es posible visualizar la imagen de la diapositiva mientras esta permanece posada en la balda.
Las persona que usa este aparato es capaz de organizar y clasificar las diapositivas de una manera rápida y simple. Solo debe ir posicionandolas en las filas según el orden que desee e ir descartando las que no le satisfagan. Al finalizar la tarea tendrá las diapositivas situadas encima del clasificador y le sera muy fácil recogerlas de manera que queden ordenadas según el criterio que uso.

\todo{Poner una imagen aquí del clasificador de diapositivas analógico y explicar su funcionamiento brevemente}
%La imagen es ClasificardorAnalogico.jpg

% se caracterizan por la facilidad de clasificación y ordenación de las diapositivas o
% fotografías.

El objetivo de Apolo es imitar en la medida de los posible el funcionamiento de estos clasificadores de diapositivas analógicos. Para ello Apolo ofrece las siguientes funciones:

\begin{enumerate}
\item Dentro de la aplicación cada fotografía aparecerá mostrada como si de una diapositiva \emph{clásica} se tratara.
\item Cada diapositiva tiene un menú asociado, el cual ofrece la posibilidad de ver la imagen (a tamaño completo) o descartarla, así como otros datos de interés que se consideren relevantes.% u observar los detalles de la misma (metadatos).
\item Para empezar a clasificar y ordenar fotografías es necesario primero haberlas importado a la aplicación. Una vez importadas, % una carpeta o una serie de fotografías
	estas aparecerán en una de la aplicación como un conjunto de diapositivas esparcidas sobre una mesa. A esta zona la denominaremos precisamente \emph{mesa}.
\item El usuario puede a partir de ese momento empezar a seleccionar las diapositivas que considere adecuadas y arrastrarlas a la \emph{zona de clasificación}. En esta zona se simularán una especie de estanterías o baldas, similares a los de la Figura~\ref{}, donde se puedan depositar las diapositivas arrastradas.
\item El usuario puede en cualquier instante alterar el orden de las diapositivas en las estanterías simplemente arrastrando la diapositiva hacia el lugar que desee.
\item También puede cambiar la diapositiva de estantería de la misma forma, arrastrándola y soltándola en la estantería deseada.
\item Cada vez que el usuario haya conseguido ordenar de forma satisfactoria una secuencia de diapositivas, puede marcarla como subsecuencia ordenada y darle un nombre. A continuación, todas las diapositivas se agruparán en una sola, que sirve de portada a la subsecuencia; y se moverán a una zona diferenciada que denominaremos de
	\emph{subsecuencias ordenadas}. El aspecto de esta zona será como el de una estantería
	diferenciada, donde se disponen las subsecuencias horizontalmente.
\item El usuario también puede descartar todas las diapositivas que se encuentren en una estantería, dejando éstas de aparecer en la aplicación.
\item En la zona de \emph{subsecuencias ordenadas} se puede alterar el orden de las subsecuencias. Es decir, una subsecuencia recién añadida, y que inicialmente se situaría al final de la lista de subsecuencias, puede ser desplazada para colocarse entre dos subsecuencias ya existentes o al principio de la lista de subsecuencias.
\item Cuando en la zona superior de la aplicación se encuentren todas las subsecuencias de diapositivas ordenadas de acuerdo a los deseos del usuario, éste podrá exportarlas a un directorio o carpeta a su elección. La aplicación entonces creará una copia de cada una de las fotografías seleccionadas en tal carpeta y las renombrará de manera que preserven el orden deseado.
\item En ningún caso se modificarán o suprimirán las fotografías originales (las que se importan). En cada exportación se duplican tantas fotografías como sean necesarias.
\item Debe ser posible guardar el estado actual de la aplicación en caso de que se tenga que interrumpir el proceso de clasificación y se desee continuarlo más tarde.
\item El usuario, basándose en estos estados parciales de la aplicación, podrá crear albums de fotos de manera rápida. Solo deberá abrir el fichero que contiene la clasificación y orden de las diapositivas deseados y exportarlas a una determinada carpeta para obtener un conjunto de fotografías digitales en el orden deseado.
\end{enumerate}

%%==========================================================================================
%% NOTA(Pablo): Párrafo de enlace.
%%==========================================================================================
Tras describir a grandes rasgos el funcionamiento de la aplicación, la siguiente sección proporciona una visión de la metodología que utilizaremos para su desarrollo, así como las justificaciones para la elección de la misma.

\section{Metodología de Desarrollo}
\label{sec:planning:metodologia}

%%==========================================================================================
%% NOTA(Pablo): Frase de introducción.
%%==========================================================================================

La metodología de desarrollo que se seguirá es la del \textbf{Modelo Incremental Iterativo}. Se traba de un proceso de desarrollo evolutivo, en el cual la aplicación se irá construyendo de manera incremental, otorgando en cada iteración mas funcionalidades al sistema. 
%Buscar una cita de algún personaje famoso 

Esta metodología requiere, inicialmente, una buena descripción del sistema o aplicación a desarrollar. Es esencial que sea clara y lo mas completa posible, pues a partir de ella se sustentará todo el proceso de desarrollo.

%*********** Insertar aquí imagen mod-iterativo.jpg

Basándose en la descripción se definen una serie de incrementos en donde cada uno añade mas funcionalidades a la aplicación, y por tanto cumple con una serie de requisitos. Debe comenzarse con la funcionalidad mas básica de la aplicación, de manera que pueda ir construyéndose incrementalmente, es decir que cada version incorpore a la anterior una funcionalidad nueva, la cual hará que se cumpla un requisito o varios.

Dentro de cada iteración hay un proceso interno,
%que puede considerarse un ciclo de vida en Cascada
en el que se analizan los requisitos de esa iteración, se diseña, se implementa y finalmente se prueba el correcto funcionamiento. La primera iteración dará como resultado la version inicial de la aplicación con una funcionalidad muy básica, y solo cumpliendo los requisitos mas básicos. A medida que vayan sucediendo iteraciones la aplicación ira cobrando funcionalidad. En la ultima iteración se obtendrá el producto final, el cual debe cumplir todos y cada uno de los requisitos.

La ventajas que tiene aplicar esta metodología al desarrollo del proyecto Apolo, es que al ser la interfaz gráfica una parte imprescindible al igual que la usabilidad, se puede en cada incremento ver si la solución tomada es la adecuada con las expectativas esperadas, y en caso contrario corregirla antes de seguir avanzando en el desarrollo de la misma.

Además gracias a que es un modelo evolutivo, se permiten (y es mas, se esperan) cambios en los requisitos en tiempo de desarrollo. Lo cual permite cierto margen de cambio en el funcionamiento de la aplicación.

%Si entendí bien, aquí debo decir que hare en cada iteración.

%======================================
% INICIO Retocar muuuucho
%======================================

En la primera iteración se abordara el siguiente caso de uso

%La imagen hay q recortarla y demás florituras.
\includegraphics[trim=1.2cm 7cm 4cm 0.5cm,clip]{images/CasoUsoIter1.eps}

En el, como puede observarse, se trata de poder importar una fotografía a la aplicación y que esta sea representada como una diapositiva. A continuación deberá poder arrastrarse por la aplicación. Para terminar podrá ser descartada o visualizada.

%Refinamiento de requisitos :S Ninguno?¿?¿ O comento ya lo de mostrar información?¿

\todo{La implementación? Q digo como lo voy a implementa?¿ Que clases voy a extender¿?}

Pruebas, para comprobar el cumplimiento de los requisitos abordados en esta iteración.... ¿?¿?


%%% Por cada iteración (hacer las iteraciones pequeñas)
%- Casos de uso
%- Refinamiento de requisitos
%- Diagrama si fuese necesario
%- Implementación
%- Pruebas

%  1º Iteración -> Importar 1 fotografía, moverla (Drag&drop), visualizar y descartarla.
%  2º Iteración -> Importar varias fotografías, dejarlas todas en el pool, realizar las estanterías.
%  3º Iteración -> Mover las diapositivas a la parte central y que se queden fijadas.
%  4º Iteración -> Recolocación de diapositivas entre la misma estantería, cambio de diapositivas entre estanterías
%  5º Iteración -> Poder añadir fila a la zona superior, poder descartar fila
%  6º Iteración -> Reordenar subsecuencias arrastrándolas entre la zona superior.
%  7º Iteración -> Exportar subsecuencias en el orden fijado
%  8º Iteración -> Guardar el estado de la aplicación
%  9º Iteración -> Cargar la aplicación al estado
% 10º Iteración -> Retoques, Efectos visuales.

%======================================
% FIN Retocar muuuucho
%======================================

\section{Requisitos de Alto Nivel de la Aplicación}
\label{sec:planning:requisitos}

%************************************************************************
% Lo escribo en futuro o en presente¿? Puede o podrá¿?
% No se mejorar la tabla, no hace salto de linea en la frase.
% Queda cortada
%************************************************************************

\begin{tabular}{|c|l|}
  \hline
  % after \\: \hline or \cline{col1-col2} \cline{col3-col4} ...
  Referencia & Requisito \\
  \hline  \hline
  R01 & Una fotografía debe ser representada como una diapositiva \\
  \hline
  R02 & La diapositiva puede visualizarse o descartarse\\
  \hline
  R03 & La aplicación importa las fotografías para trabajar con ellas \\
  \hline
  R04 & Tras la importación aparecerán todas ellas en la zona baja de la aplicación \\
  \hline
  R05 & Las diapositivas deben poderse arrastrar hasta la zona media de la aplicación donde habrá unas zonas donde depositarlas (estanterías) \\
  \hline
  R06 & Una vez soltada la diapositiva en la zona central, debe permanecer allí anclada \\
  \hline
  R07 & Se pueden recolocar las diapositivas dentro de cada estantería arrastrandolas\\
  \hline
  R08 & Se pueden cambiar diapositivas entre estanterías arrastrandolas\\
  \hline
  R09 & Una estantería, o subsecuencia de diapositivas, ya ordenada y clasificada, puede ser almacenada en la zona superior de la aplicación  \\
  \hline
  R10 & Una estantería, o subsecuencia de diapositivas, puede ser descartada \\
  \hline
  R11 & En la zona superior, se pueden reordenar subsecuencias de diapositivas \\
  \hline
  R12 & Se puede exportar la clasificación y ordenación a un directorio \\
  \hline
  R13 & La exportación debe conservar el orden fijado durante el uso de la aplicación \\
  \hline
  R14 & No se modifican las fotografías originales, se copian  \\
  \hline
  R15 & Se puede guardar el estado de la aplicación en un fichero \\
  \hline
  R16 & Se puede cargar la aplicación a un estado previo por medio de un fichero \\
  \hline
\end{tabular}

\section{Diseño de los Artefactos Base del Proyecto}

%%% Los artefactos comunes son:
%%  - La interfaz gráfica
%%  - Haces un diagrama de clases con las estructuras de datos

\section{Construcción de Prototipos}

%%  Hacer una bean diapositiva, cargar una diapositiva y moverla
